-- THIS FILE IS AUTOGENERATED. Don't change it directly.

-- Static class members

declare MS: {
    CanInteract: { 
    },
    GetPawnClass: { 
    },
    OnHealthChanged: { 
    },
    OnMatchAllocated: { 
    },
    OnOverlapBegin: { 
    },
    OnPlayerBotDeath: { 
    },
    OnPlayerMatchEvent: { 
    },
    ShouldRespawn: { 
    },
    Timer: { 
    },
    Utility: { 
        All: (() -> {Utility}),
        Cast: ((Object) -> Utility),
        ClearTimer: ((Timer) -> ()),
        First: (() -> Utility),
        Log: ((string) -> ()),
        PauseTimer: ((Timer) -> ()),
        ResumeTimer: ((Timer) -> ()),
        SetTimer: ((any, number) -> Timer) & ((any, number, boolean) -> Timer) & ((any, number, boolean, number) -> Timer),
        SetTimerWithContext: ((any, number, Object) -> Timer) & ((any, number, boolean, Object) -> Timer) & ((any, number, boolean, number, Object) -> Timer)
    }

}

declare Moon: {
    ActiveGameplayEffect: { 
    },
    AudioController: { 
        All: (() -> {AudioController}),
        Cast: ((Object) -> AudioController),
        First: (() -> AudioController),
        PlayGlobalSound: ((any) -> ()),
        PlaySound: ((any, PlayerState) -> ()) & ((any, {PlayerState}) -> ())
    },
    CapacityLimitedInventory: { 
        All: (() -> {CapacityLimitedInventory}),
        Cast: ((Object) -> CapacityLimitedInventory),
        First: (() -> CapacityLimitedInventory)
    },
    Deadrop: { 
        All: (() -> {Deadrop}),
        AwardDeadrop: ((Player) -> ()) & ((Player, number) -> ()) & (({Player}) -> ()),
        Cast: ((Object) -> Deadrop),
        First: (() -> Deadrop)
    },
    Equipment: { 
        All: (() -> {Equipment}),
        Cast: ((Object) -> Equipment),
        First: (() -> Equipment)
    },
    ExtractionPlayerStart: { 
        All: (() -> {ExtractionPlayerStart}),
        Cast: ((Object) -> ExtractionPlayerStart),
        First: (() -> ExtractionPlayerStart)
    },
    GameMode: { 
        All: (() -> {GameMode}),
        Cast: ((Object) -> GameMode),
        First: (() -> GameMode)
    },
    GameplayEffect: { 
        ApplyEffect: ((Player, GameplayEffect) -> ActiveGameplayEffect),
        CreateEffect: ((string, number) -> GameplayEffect),
        OverrideAttributeBaseValue: ((Player, string, number) -> ()),
        RemoveEffect: ((Player, ActiveGameplayEffect) -> ()),
        ResetAttributeBaseValue: ((Player, string, string) -> ()),
        ResetAttributeSetBaseValue: ((Player, string) -> ())
    },
    GameplayEffectUtility: { 
        All: (() -> {GameplayEffectUtility}),
        Cast: ((Object) -> GameplayEffectUtility),
        First: (() -> GameplayEffectUtility)
    },
    HudController: { 
        All: (() -> {HudController}),
        Cast: ((Object) -> HudController),
        First: (() -> HudController),
        Get: (() -> HudController),
        GetForPlayer: ((Player) -> HudController)
    },
    Interactable: { 
        All: (() -> {Interactable}),
        Cast: ((Object) -> Interactable),
        First: (() -> Interactable),
        SpawnInteractable: ((string, Vector) -> Interactable)
    },
    InventoryItemInstance: { 
        All: (() -> {InventoryItemInstance}),
        Cast: ((Object) -> InventoryItemInstance),
        First: (() -> InventoryItemInstance)
    },
    InventoryItemInstance_Weapon: { 
        All: (() -> {InventoryItemInstance_Weapon}),
        Cast: ((Object) -> InventoryItemInstance_Weapon),
        First: (() -> InventoryItemInstance_Weapon)
    },
    InventoryItemInstance_WeaponPart: { 
        Cast: ((Object) -> InventoryItemInstance_WeaponPart)
    },
    ItemContainer: { 
        All: (() -> {ItemContainer}),
        Cast: ((Object) -> ItemContainer),
        First: (() -> ItemContainer)
    },
    LevelVariation: { 
        All: (() -> {LevelVariation}),
        Cast: ((Object) -> LevelVariation),
        First: (() -> LevelVariation),
        LoadLevelVariation: ((string) -> boolean)
    },
    Location: { 
        AddLocationIndicator: ((Actor, Vector, EAllianceVisibility) -> LocationIndicator) & ((Actor, Vector, EAllianceVisibility, Team) -> LocationIndicator),
        All: (() -> {Location}),
        Cast: ((Object) -> Location),
        First: (() -> Location),
        PingActor: ((Actor, ESquadPingType, boolean) -> ()),
        PingActorWithContext: ((Actor, Player, ESquadPingType, boolean) -> ()) & ((Actor, Team, ESquadPingType, boolean) -> ()),
        PingLocation: ((Vector, ESquadPingType, boolean) -> ()),
        PingLocationWithContext: ((Vector, Player, ESquadPingType, boolean) -> ()) & ((Vector, Team, ESquadPingType, boolean) -> ()),
        RemoveAllLocationIndicators: ((Actor) -> ()),
        RemoveLocationIndicator: ((Actor, LocationIndicator) -> ())
    },
    LocationIndicator: { 
        All: (() -> {LocationIndicator}),
        Cast: ((Object) -> LocationIndicator),
        First: (() -> LocationIndicator)
    },
    MatchLootRules: { 
        All: (() -> {MatchLootRules}),
        Cast: ((Object) -> MatchLootRules),
        First: (() -> MatchLootRules),
        Get: (() -> MatchLootRules)
    },
    MessageController: { 
        All: (() -> {MessageController}),
        Cast: ((Object) -> MessageController),
        First: (() -> MessageController),
        Get: (() -> MessageController)
    },
    ObjectiveSettings: { 
        All: (() -> {ObjectiveSettings}),
        Cast: ((Object) -> ObjectiveSettings),
        First: (() -> ObjectiveSettings),
        Get: (() -> ObjectiveSettings) & ((PlayerState) -> ObjectiveSettings)
    },
    Outfit: { 
        All: (() -> {Outfit}),
        Cast: ((Object) -> Outfit),
        First: (() -> Outfit)
    },
    Player: { 
        All: (() -> {Player}),
        Cast: ((Object) -> Player),
        First: (() -> Player)
    },
    PlayerAttributes: { 
        All: (() -> {PlayerAttributes}),
        Cast: ((Object) -> PlayerAttributes),
        First: (() -> PlayerAttributes)
    },
    PlayerBotManager: { 
        All: (() -> {PlayerBotManager}),
        Cast: ((Object) -> PlayerBotManager),
        First: (() -> PlayerBotManager),
        Get: (() -> PlayerBotManager)
    },
    PlayerStart: { 
        All: (() -> {PlayerStart}) & (() -> {PlayerStart}),
        Cast: ((Object) -> PlayerStart) & ((Object) -> PlayerStart),
        First: (() -> PlayerStart) & (() -> PlayerStart),
        MakeStart: ((string, Vector) -> PlayerStart)
    },
    PlayerStats: { 
        AddCustomStatValue: ((PlayerState, string, number) -> ()),
        All: (() -> {PlayerStats}),
        Cast: ((Object) -> PlayerStats),
        First: (() -> PlayerStats),
        GetAssists: ((PlayerState) -> number),
        GetCustomStatValue: ((PlayerState, string) -> number),
        GetDamageDealt: ((PlayerState) -> number),
        GetDamageReceived: ((PlayerState) -> number),
        GetDeaths: ((PlayerState) -> number),
        GetHealingDone: ((PlayerState) -> number),
        GetKills: ((PlayerState) -> number),
        GetSelfTerminations: ((PlayerState) -> number),
        SetCustomStatValue: ((PlayerState, string, number) -> ()),
        SetDamageTrackingDuration: ((number) -> number)
    },
    PreGameMode: { 
        All: (() -> {PreGameMode}),
        Cast: ((Object) -> PreGameMode),
        First: (() -> PreGameMode)
    },
    ScoreUISettings: { 
        All: (() -> {ScoreUISettings}),
        Cast: ((Object) -> ScoreUISettings),
        First: (() -> ScoreUISettings),
        Get: (() -> ScoreUISettingsData)
    },
    ScoreUISettingsData: { 
    },
    ScriptTuner: { 
        All: (() -> {ScriptTuner}),
        Cast: ((Object) -> ScriptTuner),
        First: (() -> ScriptTuner),
        GetOrMake: (() -> ScriptTuner)
    },
    TaggedLocation: { 
        All: (() -> {TaggedLocation}),
        Cast: ((Object) -> TaggedLocation),
        First: (() -> TaggedLocation)
    },
    Team: { 
        All: (() -> {Team}),
        Cast: ((Object) -> Team),
        First: (() -> Team),
        GetPlayersTeam: ((Player) -> Team),
        RemovePlayerFromCurrentTeam: ((Player) -> ())
    },
    TeamSettingsData: { 
    },
    Teams: { 
        All: (() -> {Teams}),
        Cast: ((Object) -> Teams),
        First: (() -> Teams),
        GetOrMakeTeam: ((string) -> Team) & ((string, Color) -> Team),
        Settings: (() -> TeamSettingsData)
    },
    TelemetryEvents: { 
        All: (() -> {TelemetryEvents}),
        Cast: ((Object) -> TelemetryEvents),
        First: (() -> TelemetryEvents),
        SendMatchTelemtryEvent: ((string) -> ()),
        SendPlayerTelemtryEvent: ((Player, string) -> ())
    },
    Trigger: { 
        All: (() -> {Trigger}),
        Cast: ((Object) -> Trigger),
        First: (() -> Trigger),
        SpawnTrigger: ((Vector) -> Trigger) & ((Vector, Vector) -> Trigger) & ((Vector, Vector, Rotator) -> Trigger)
    }

}

declare Unreal: {
    Actor: { 
        All: (() -> {Actor}),
        Cast: ((Object) -> Actor),
        First: (() -> Actor)
    },
    GameModeBase: { 
        All: (() -> {GameModeBase}),
        Cast: ((Object) -> GameModeBase),
        First: (() -> GameModeBase)
    },
    Navigation: { 
        All: (() -> {Navigation}),
        Cast: ((Object) -> Navigation),
        FindNavigablePosition: ((Vector, number) -> (boolean, Vector)) & ((Vector, number, PlayerState) -> (boolean, Vector)),
        First: (() -> Navigation)
    },
    Object: { 
        Cast: ((Object) -> Object)
    },
    PlayerStart: { 
        All: (() -> {PlayerStart}) & (() -> {PlayerStart}),
        Cast: ((Object) -> PlayerStart) & ((Object) -> PlayerStart),
        First: (() -> PlayerStart) & (() -> PlayerStart),
        MakeStart: ((string, Vector) -> PlayerStart)
    },
    PlayerState: { 
        All: (() -> {PlayerState}),
        Cast: ((Object) -> PlayerState),
        First: (() -> PlayerState)
    }

}



-- Classes

declare class CanInteract
    function Connect(self, _: any): boolean
    function Remove(self, _: any): boolean
    function Clear(self)
end

declare class GetPawnClass
    function Connect(self, _: any): boolean
    function Remove(self, _: any): boolean
    function Clear(self)
end

declare class OnHealthChanged
    function ConnectAsync(self, _: any): boolean
    function Connect(self, _: any): boolean
    function Remove(self, _: any): boolean
    function Clear(self)
end

declare class OnMatchAllocated
    function ConnectAsync(self, _: any): boolean
    function Connect(self, _: any): boolean
    function Remove(self, _: any): boolean
    function Clear(self)
end

declare class OnOverlapBegin
    function ConnectAsync(self, _: any): boolean
    function Connect(self, _: any): boolean
    function Remove(self, _: any): boolean
    function Clear(self)
end

declare class OnPlayerBotDeath
    function ConnectAsync(self, _: any): boolean
    function Connect(self, _: any): boolean
    function Remove(self, _: any): boolean
    function Clear(self)
end

declare class OnPlayerMatchEvent
    function ConnectAsync(self, _: any): boolean
    function Connect(self, _: any): boolean
    function Remove(self, _: any): boolean
    function Clear(self)
end

declare class ShouldRespawn
    function Connect(self, _: any): boolean
    function Remove(self, _: any): boolean
    function Clear(self)
end

declare class Timer
end

declare class Utility
end

declare class ActiveGameplayEffect
end

declare class AudioController
end

declare class CapacityLimitedInventory
end

declare class Deadrop
end

declare class Equipment
end

declare class ExtractionPlayerStart
    CanSpawnSyn: boolean
    CanSpawnSkin: boolean
end

declare class GameMode
    RespawnDelay: number
    AutomaticRespawn: boolean
    ShouldRespawn: ShouldRespawn
    OnRespawn: OnPlayerBotDeath
    GetPawnClass: GetPawnClass
    OnMatchAllocated: OnMatchAllocated
    OnLogin: OnPlayerBotDeath
    OnLogout: OnPlayerBotDeath
    OnPlayerMatchEvent: OnPlayerMatchEvent
    OnMatchReady: OnMatchAllocated
    OnMatchTimeout: OnMatchAllocated
    function EndMatch(self, WinningPlayer: Player)
    function EndMatch(self, WinningPlayers: {Player})
    function AddPlayerStartFilter(self, Filter: any)
    function SetMatchClock(self, Duration: number)
    function StartAddingPlayers(self, InNumberOfPlayersToAdd: number)
    function StopAddingPlayers(self)
    function AddMorePlayers(self, InNumberOfPlayersToAdd: number, InAddMorePlayersStart: number, InAddMorePlayersEnd: number)
    function MatchSize(self): number
    function MatchmakingTeamSize(self, MatchmakingTeamId: number): number
end

declare class GameplayEffect
    function SetMagnitude(self, AttributeName: string, Magnitude: number)
end

declare class GameplayEffectUtility
end

declare class HudController
    function AddWidget(self, WidgetName: string)
    function RemoveWidget(self, WidgetName: string)
end

declare class Interactable
    CanInteract: ShouldRespawn
    OnGrabbed: OnPlayerBotDeath
    OnDropped: OnPlayerBotDeath
    function SetInteractableLocation(self, Location: Vector)
    function SetColor(self, Color: Color)
    function AddBlockingInteractTag(self, BlockTag: GameplayTag)
    function RemoveBlockingInteractTag(self, BlockTag: GameplayTag)
    function Destroy(self)
end

declare class InventoryItemInstance
    StackCount: number
    MaxStackCount: number
    function SetStackCount(self, Count: number)
end

declare class InventoryItemInstance_Weapon
    function TryAttachWeaponPart(self, Part: InventoryItemInstance_WeaponPart)
    function TryRemoveWeaponPart(self, Part: InventoryItemInstance_WeaponPart): boolean
end

declare class InventoryItemInstance_WeaponPart
end

declare class ItemContainer
    function AddItem(self, Item: string)
    function AddItem(self, Item: string, OnAdded: any)
    function AddItem(self, Item: string, OnAdded: any, AutoEquip: boolean)
    function AddItemBlocking(self, _: string, _: any)
    function ClearInventory(self)
end

declare class LevelVariation
end

declare class Location
end

declare class LocationIndicator
end

declare class MatchLootRules
    EnableDeathbags: boolean
    DeathBagLifetime: number
    EnableLoot: boolean
    RespawnLoot: boolean
    ContainerRespawnTime: number
    PickupRespawnTime: number
    function ClearAllDeathBags(self)
end

declare class MessageController
    function SendMessageToAll(self, Message: string)
    function SendMessageToAll(self, Message: string, Duration: number)
    function SendMessageToAll(self, Message: string, Duration: number, DisplayDurationLeft: boolean)
    function SendMessage(self, ToSendTo: {Player}, Message: string)
    function SendMessage(self, ToSendTo: {Player}, Message: string, Duration: number)
    function SendMessage(self, ToSendTo: {Player}, Message: string, Duration: number, DisplayDurationLeft: boolean)
    function ClearMessage(self, ToSendTo: {Player})
end

declare class ObjectiveSettings
    function AddObjective(self, ObjectiveData: any): number
    function RemoveObjective(self, Handle: number)
end

declare class Outfit
    function SetOutfit(self, Tag: GameplayTag)
end

declare class Player
    MatchState: EExtractionResult
    OnKill: OnPlayerBotDeath
    OnKilled: OnPlayerBotDeath
    OnHealthChanged: OnHealthChanged
    OnAssist: OnPlayerBotDeath
    function IsAlive(self): boolean
    function IsBot(self): boolean
    function GetBackpack(self): CapacityLimitedInventory
    function GetEquipment(self): Equipment
    function GetRewardsContainer(self): ItemContainer
    function GetLocation(self): Vector
    function Reset(self)
    function SetScale(self, Scale: number)
    function SetInfiniteClip(self, bInfiniteClip: boolean)
    function SetInfiniteAmmo(self, bInInfiniteAmmo: boolean)
    function GetAttributes(self): PlayerAttributes
    function AddTag(self, Tag: GameplayTag)
    function RemoveTag(self, Tag: GameplayTag)
    function GetOutfitController(self): Outfit
    function GetMatchmakingTeamId(self): number
    function OnTagAdded(self, Tag: GameplayTag, OnTagAddedCallback: any)
    function OnTagRemoved(self, Tag: GameplayTag, OnTagRemovedCallback: any)
end

declare class PlayerAttributes
    function GetMaxHealth(self): number
    function GetHealth(self): number
end

declare class PlayerBotManager
    OnPlayerBotDeath: OnPlayerBotDeath
    function SpawnPlayerBot(self): Player
    function SpawnPlayerBots(self, NumBots: number)
    function GetAllPlayerBots(self): {Player}
    function RemoveRandomPlayerBot(self)
    function RemovePlayerBot(self, Player: Player)
    function RemoveAllPlayerBots(self)
    function IsPlayerABot(self, Player: Player): boolean
    function SetPlayerBotDifficulty(self, Difficulty: number)
end

declare class PlayerStart
    function HasTag(self, Tag: string): boolean
end

declare class PlayerStats
end

declare class PreGameMode
    OnMatchKickOff: OnMatchAllocated
end

declare class ScoreUISettings
end

declare class ScoreUISettingsData
    StatName: string
    WinLimit: number
    ShowTeamName: boolean
    IsTeamMatch: boolean
    ShowPlace: boolean
    ShowScore: boolean
    ShowClock: boolean
    OnlyShowLocalScore: boolean
    DisplayPlayerName: boolean
    HideScores: boolean
    function SetMatchDescription(self, Description: string)
    function SetRoundName(self, RoundName: string)
    function SetMatchName(self, MatchName: string)
    function SetMatchStatColumns(self, StatNames: {string})
    function GetMatchStatColumns(self): {string}
end

declare class ScriptTuner
    function GetFloat(self, Path: string, Default: number): number
    function GetInt(self, Path: string, Default: number): number
    function GetString(self, Path: string, Default: string): string
    function GetBool(self, Path: string, Default: boolean): boolean
end

declare class TaggedLocation
    function HasTag(self, TagName: string): boolean
end

declare class Team
    function GetTeamMembers(self): {Player}
    function AddPlayer(self, Player: Player)
    function RemovePlayer(self, Player: Player)
    function HasPlayer(self, Player: Player): boolean
    function Size(self): number
    function GetDisplayName(self): string
end

declare class TeamSettingsData
    AutoCreateTeams: boolean
    UseSquadColors: boolean
end

declare class Teams
end

declare class TelemetryEvents
end

declare class Trigger
    OnOverlapBegin: OnOverlapBegin
    OnOverlapEnd: OnOverlapBegin
    OnPlayerOverlapBegin: OnPlayerBotDeath
    OnPlayerOverlapEnd: OnPlayerBotDeath
    function SetColor(self, Color: Color)
    function SetLocation(self, Location: Vector)
    function Destroy(self)
end

declare class Actor
    function GetLocation(self): Vector
    function Destroy(self): boolean
end

declare class GameModeBase
end

declare class Navigation
end

declare class Object
    function GetName(self): string
    function __tostring(self): string
    function Alive(self): boolean
end

declare class PlayerStart
    function HasTag(self, Tag: string): boolean
end

declare class PlayerState
    function GetLocation(self): Vector
end



-- Enums

declare class EAllianceVisibility
end

declare class ESquadPingType
end

declare class EExtractionResult
end



-- Enum values

declare EAllianceVisibility : {
    Neutral : EAllianceVisibility,
    Ally : EAllianceVisibility,
    Enemy : EAllianceVisibility
}
declare ESquadPingType : {
    LOCATION : ESquadPingType,
    ENEMY : ESquadPingType,
    PICKUP : ESquadPingType
}
declare EExtractionResult : {
    None : EExtractionResult,
    Success : EExtractionResult,
    Killed : EExtractionResult,
    RanOutOfTime : EExtractionResult,
    Logout : EExtractionResult,
    DeadropWinner : EExtractionResult
}

-- Well known types
export type Color = {R: number, G: number, B: number, A: number}
export type GameplayTag = string
export type Rotator = {Yaw: number, Pitch: number, Roll: number}
export type Vector = {X: number, Y: number, Z: number}